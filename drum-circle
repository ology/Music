#!/usr/bin/env perl
use strict;
use warnings;

# For local development:
use if $ENV{USER} eq 'gene', lib => map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Drummer-Tiny MIDI-Util Music-Duration Music-Duration-Partition);

use MIDI::Drummer::Tiny ();
use MIDI::Util qw(midi_dump ticks);
use Music::Duration::Partition ();
use Data::Dumper::Compact qw(ddc);
use Getopt::Long qw(GetOptions);
use Pod::Usage qw(pod2usage);

my %opts = (
    drummers => 4,  # The number of drummers
    bpm      => 90, # Beats per minute
    extend   => 4,  # Number of beats to play after all drummers have entered
    measures => 4,  # Number of bars each drummer plays alone
    beats    => 4,  # Number of beats that a drummer plays per phrase motif
    pool     => 'qn den en sn', # Pool of possible phrase durations
);
GetOptions( \%opts,
    'drummers=i',
    'bpm=i',
    'extend=i',
    'measures=i',
    'beats=i',
    'pool=s',
    'help|?',     # Call as --help or -?
    'man',        # Call as --man
) or pod2usage(2);
pod2usage(1) if $opts{help};
pod2usage(-exitval => 0, -verbose => 2) if $opts{man};

# Setup a drum score, etc
my $d = MIDI::Drummer::Tiny->new(
    file   => "$0.mid",
    bpm    => $opts{bpm},
    bars   => $opts{drummers} * $opts{measures},
    reverb => 15, # We're outside
);

# Collect the percussion instruments you wish to hear
my @drums = (
    # $d->mute_hi_conga, $d->cabasa, $d->maracas, $d->hi_bongo, $d->mute_triangle, # 5 QUIET ONES
    $d->low_bongo, $d->open_hi_conga, $d->low_conga, $d->short_guiro, $d->claves, $d->hi_wood_block, $d->low_wood_block, # 7
    $d->high_agogo, $d->low_agogo, $d->tambourine, $d->cowbell, $d->open_triangle, # 5
    # $d->vibraslap, $d->high_timbale, $d->low_timbale, $d->mute_cuica, $d->open_cuica, # 5
    # $d->hi_tom, $d->hi_mid_tom, $d->low_mid_tom, $d->low_tom, $d->hi_floor_tom, $d->low_floor_tom, # 6 drum kit toms
    # $d->kick, $d->snare, # 2 Western backbeat
);

print 'There are ', scalar(@drums), " known percussion instruments.\n";
die "Can't have more drummers ($opts{drummers}) than instruments!\n"
    if $opts{drummers} > @drums;

# Split the given space-separated string of durations into a list
my $pool = [ split /\s+/, $opts{pool} ];

# Make a phrase generator
my $generator = Music::Duration::Partition->new(
    size => $opts{beats},
    pool => $pool,
);

my %seen; # Drums that have been selected

# Get the amount of time to rest = beats * 96
my $rest = 'd' . ($opts{beats} * ticks($d->score));

# Common phrase() arguments
my %common = (
    drummer   => $d,
    generator => $generator,
    drums     => \@drums,
    seen      => \%seen,
    beats     => $opts{beats},
    extend    => $opts{extend},
    measures  => $opts{measures},
    rest      => $rest,
    width     => length($opts{drummers}),
);

# Build the code-ref MIDI phrases played by each drummer
my @phrases;
push @phrases, phrase(%common, phrase => $_)
    for 1 .. $opts{drummers};

$d->score->synch(@phrases); # Play the phrases simultaneously

$d->write; # Write the score to a MIDI file

sub phrase {
    my (%args) = @_;

    # Get an unseen drum to play
    my $drum = $args{drums}->[ int rand $args{drums}->@* ];
    while ($args{seen}->{$drum}++) {
        $drum = $args{drums}->[ int rand $args{drums}->@* ];
    }
    my $drum_name = midi_dump('notenum2percussion')->{$drum};

    my $motif = $args{generator}->motif; # Create a rhythmic phrase

    # Tell them what they've won!
    printf "%*d. %-15s: %s", $args{width}, $args{phrase}, $drum_name, ddc($motif);

    # Either rest or play the motif
    my $phrase = sub {
        for my $n (1 .. $args{drummer}->bars + $args{extend}) {
            # If we are not up yet, then rest
            if ($n < ($args{phrase} * $args{measures})) {
                $args{drummer}->rest($args{rest});
                next;
            }
            # Otherwise play a rhythmic phrase!
            for my $duration (@$motif) {
                # Get a fluctuating velocity between f and fff
                my $velocity = 'v' . (96 + int(rand 32));
                $args{drummer}->note($duration, $drum, $velocity);
            }
        }
    };

    return $phrase;
}

__END__

=head1 NAME

Imitating a Drum Circle

=head1 SYNOPSIS

  $ perl drum-circle --help # -? or --man
  $ perl drum-circle # use defaults
  $ perl drum-circle --drummers=11 --bpm=120 --extend=2 --measures=3
  $ perl drum-circle --beats=5 --pool='thn tqn ten tsn' # 5/4 triplets? YMMV
  # Then:
  $ timidity -c ~/timidity.cfg drum-circle.mid  # On *nix
  # Windows plays MIDI with the "Legacy Media Player"

=head1 DESCRIPTION

This program simulates a "drum circle", which may include friendly
hippies.

=head1 THE CODE

=head2 Setup

1. Set the user defined number of B<drummers> to play. This is C<4> by
default and up to C<30> if all percussion instruments are uncommented
in the code.

2. Set the user defined number of B<extend> measures to play after all
drummers have joined the circle. This is C<4> by default.

3. Declare a L<MIDI::Drummer::Tiny> instance, that will be the beating
heart of the program. This uses the beats per minute (B<bpm> default
C<90>) and the number of B<measures> each drummer plays.

4. Declare the known percussion instruments. (Use the source, Luke.)

5. Instantiate a rhythmic phrase generator of 4 beats (because we are
in 4/4 time) and a pool of possible durations. (Use the source again.)

=head2 Phrases

1. Build the phrases to play, one for each drummer.

2. Synchronize the phrase parts, so that they are played
simultaneously.

3. Finally, write the score to a MIDI file, named after the program
itself.

=head2 Subroutine

This is the meat of the program, utilizing all the things we have
setup. It generates a phrase (a C<CODE> reference), which is added to
the list of phrases that are then played together.

1. Get an unseen instrument to use for a player.

2. Generate a rhythmic "motif."

3. Create an anonymous subroutine that either rests or plays the
motif for the number of beats.

3.1. The resting is done depending on the drummer entry order (into
the circle). If we are not up yet, then rest.

3.2. If not resting, play the phrase continuously until the end.

3.2.1. For each hit, get a random velocity between soft (C<f>) and
loud (C<fff>). This gives the sound a bit of dynamic texture.

4. Return this anonymous subroutine to be gathered into a list of all
drummer parts.

=head1 REFERENCES

The writeup: L<https://ology.github.io/2020/11/01/imitating-a-drum-circle/>

The Wikipedia entry: L<https://en.wikipedia.org/wiki/Drum_circle>

=cut

