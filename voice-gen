#!/usr/bin/env perl
use strict;
use warnings;

use MIDI::Util qw(setup_score);
use Music::Cadence;
use Music::Note;
use Music::Scales;
use Music::VoiceGen;

my $max   = shift || 16;
my $note  = shift || 60;
my $leads = shift || '2,7';
my $ints  = shift || '-4,-3,-2,2,3,4';

my @leaders   = split /,/, $leads;
my @intervals = split /,/, $ints;

my $quarter = 'qn';
my $half    = 'hn';

my $mn = Music::Note->new( $note, 'midinum' );

my @pitches = get_scale_MIDI( $mn->format('isobase'), $mn->octave );

my $voice = Music::VoiceGen->new(
    pitches   => \@pitches,
    intervals => \@intervals,
);
#use Data::Dumper; warn Dumper $voice->possibles; exit;

my $score = setup_score();

my $mc = Music::Cadence->new(
    key    => $mn->format('isobase'),
    octave => $mn->octave,
    format => 'midi',
);

for my $i ( 1 .. $max ) {
    $score->n( $quarter, $voice->rand );

    if ( $i % 4 == 0 ) {
        my $chords = $mc->cadence(
            type    => 'half',
            leading => $leaders[ int rand @leaders ],
        );
        $score->n( $half, @$_ ) for @$chords;
    }
}

my $chords = $mc->cadence( type => 'deceptive' );
$score->n( $half, @$_ ) for @$chords;

$chords = $mc->cadence( type => 'plagal' );
$score->n( $half, @$_ ) for @$chords;

$score->write_score("$0.mid");
