#!/usr/bin/env perl
use strict;
use warnings;

use Data::Dumper::Compact qw(ddc);
use if $ENV{USER} eq "gene", lib => map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Drummer-Tiny MIDI-Praxis-Variation MIDI-Util Music-Duration Music-Duration-Partition);
use MIDI::Drummer::Tiny;
use MIDI::Praxis::Variation 'diminution';
use MIDI::Util qw(set_chan_patch);
use Music::Scales;
use Music::VoiceGen;
use Music::Duration::Partition;

my $bpm    = shift || 105;
my $note   = shift || 'A';
my $bscale = shift || 'pminor';
my $tscale = shift || 'minor';

my $octave = 1;
my $beats  = 5;

my $d = MIDI::Drummer::Tiny->new(
    file      => "$0.mid",
    bpm       => $bpm,
    signature => '5/4',
    kick      => 'n36', # Override default patch
    snare     => 'n40', # "
);

$d->score->synch(
    \&drums,
    \&bass,
    \&top,
);

$d->write;

sub bass {
    set_chan_patch($d->score, 1, 35);

    my $mdp = Music::Duration::Partition->new(
        size => $beats,
        pool => [qw/ hn qn /],
        weights => [2, 1],
    );
    my $motif1 = $mdp->motif;
    my $motif2 = $mdp->motif;
    print 'Bottom motif #1: ', ddc($motif1);
    print 'Bottom motif #2: ', ddc($motif2);

    my @pitches = get_scale_MIDI($note, $octave, $bscale);
    my @intervals = qw(-3 -2 -1 1 2 3);
    my $voice = Music::VoiceGen->new(
        pitches   => \@pitches,
        intervals => \@intervals,
    );

    my @notes1 = map { $voice->rand } @$motif1;
    my @notes2 = map { $voice->rand } @$motif2;
    print 'Bottom pitches #1: ', ddc(\@notes1);
    print 'Bottom pitches #2: ', ddc(\@notes2);

    for my $n (1 .. $d->bars * 2) {
        for my $i (0 .. $#$motif1) {
            $d->note($motif1->[$i], $n % 2 ? $notes1[$i] : $notes2[$i]);
        }

        for my $i (0 .. $#$motif2) {
            $d->note($motif2->[$i], $n % 2 ? $notes1[$i] : $notes2[$i]);
        }
    }

    for my $n (1 .. $d->bars / 2) {
        $d->note($d->quarter, $pitches[0]);
        $d->note($d->quarter, $pitches[0]);
        $d->rest($d->eighth);
        $d->note($d->quarter, $pitches[0]);
        $d->note($d->quarter, $pitches[0]);
        $d->rest($d->eighth);
    }
}

sub top {
    set_chan_patch($d->score, 0, 4);

    my $mdp = Music::Duration::Partition->new(
        size => $beats,
        pool => [qw/ dqn qn en /],
#        pool => [qw/ qn den en sn /],
#        groups => [0, 0, 2, 2],
    );
    my $motif1 = $mdp->motif;
    my $motif2 = $mdp->motif;
    print 'Top motif #1: ', ddc($motif1);
    print 'Top motif #2: ', ddc($motif2);

    my @pitches = (
        get_scale_MIDI($note, $octave + 1, $tscale),
        get_scale_MIDI($note, $octave + 2, $tscale)
    );
    my @intervals = qw(-4 -3 -2 -1 1 2 3 4);
    my $voice = Music::VoiceGen->new(
        pitches   => \@pitches,
        intervals => \@intervals,
    );

    my @pitches2 = (
        get_scale_MIDI($note, $octave + 2, $tscale),
        get_scale_MIDI($note, $octave + 3, $tscale),
    );
    @intervals = qw(-2 -1 1 2);
    my $voice2 = Music::VoiceGen->new(
        pitches   => \@pitches2,
        intervals => \@intervals,
    );

    my @notes1 = map { $voice->rand } @$motif1;
    my @notes2 = map { $voice->rand } @$motif1;
    my @notes3 = map { $voice->rand } @$motif2;
    my @notes4 = map { $voice2->rand } @$motif2;
    print 'Top pitches #1: ', ddc(\@notes1);
    print 'Top pitches #2: ', ddc(\@notes2);
    print 'Top pitches #3: ', ddc(\@notes3);
    print 'Top pitches #4: ', ddc(\@notes4);

    for my $n (1 .. $d->bars * 2) {
        for my $i (0 .. $#$motif1) {
            $d->note($motif1->[$i], $n % 6 == 0 ? $notes4[$i] : $n % 2 ? $notes1[$i] : $notes2[$i]);
        }

        for my $i (0 .. $#$motif2) {
            my @halved = diminution($motif2->[$i]);
            $d->note($halved[0], $n % 4 == 0 ? $notes4[$i] : $notes3[$i]);
            $d->rest($halved[0]);
        }
    }

    for my $n (1 .. $d->bars / 2) {
        $d->rest($d->quarter);
        $d->note($d->quarter, $pitches[0]);
        $d->rest($d->dotted_quarter);
        $d->note($d->quarter, $pitches[0]);
        $d->rest($d->eighth);
    }
}

sub drums {
    $d->metronome54($d->bars * 4 + 2);
}
