#!/usr/bin/env perl
use strict;
use warnings;

use if $ENV{USER} eq "gene", lib => map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Util Music-Cadence Music-ToRoman);
use Music::Cadence; # https://metacpan.org/release/Music-Cadence
use MIDI::Util qw(midi_format setup_score); # https://metacpan.org/release/MIDI-Util
use Music::Chord::Note;
use Music::Scales;

use constant M => 'major';

my $bpm  = shift || 100;
my $note = shift || 'C'; # Bb, C\#, etc.
my $name = shift || M; # major or minor

my @scale = get_scale_notes($note, $name);

my $cn = Music::Chord::Note->new;
my @chords = (
    [$cn->chord($scale[0] . ($name eq M ? '' : 'm'))],
    [$cn->chord($scale[1] . ($name eq M ? 'm' : 'dim'))],
    [$cn->chord($scale[2] . ($name eq M ? 'm' : ''))],
    [$cn->chord($scale[3] . ($name eq M ? '' : 'm'))],
    [$cn->chord($scale[4] . ($name eq M ? '' : 'm'))],
    [$cn->chord($scale[5] . ($name eq M ? 'm' : ''))],
    [$cn->chord($scale[6] . ($name eq M ? 'dim' : ''))],
);
@chords = map { [ midi_format(@$_) ] } @chords;

my $half  = 'hn';
my $whole = 'wn';

my $mc = Music::Cadence->new(
    key    => $note,
    scale  => $name,
    octave => 4,
);

my $score = setup_score( bpm => $bpm );

A();
A();

$score->n( $whole, @{ $chords[0] } );
$score->n( $whole, @{ $chords[0] } );

$score->write_score("$0.mid");

sub A {
    a1( 0, [1,2] );
    a1( 1, [4,2] );
    a2();
}

sub a1 {
    my ( $i, $degrees ) = @_;
    for my $n ( @$degrees ) {
        my $cadence = $mc->cadence(
            type      => 'deceptive',
            variation => ($n % 2 ? 1 : 2),
        );
        @$cadence = map { [ midi_format(@$_) ] } @$cadence;
        $score->n( $half, @$_ ) for @$cadence;
        $cadence = $mc->cadence(
            type    => 'half',
            leading => $n,
        );
        @$cadence = map { [ midi_format(@$_) ] } @$cadence;
        $score->n( $whole, @$_ ) for @$cadence;
    }
    if ( $i % 2 == 0 ) {
        $score->n( $whole, @{ $chords[2] } );
        $score->n( $whole, @{ $chords[5] } );
    }
    else {
        $score->n( $whole, @{ $chords[5] } );
        $score->n( $whole, @{ $chords[2] } );
    }
}

sub a2 {
    my $cadence = $mc->cadence(
        type      => 'imperfect',
        inversion => { 2 => 1 },
    );
    @$cadence = map { [ midi_format(@$_) ] } @$cadence;
    $score->n( $whole, @$_ ) for @$cadence;
    $score->n( $whole, @{ $chords[2] } );
    $score->n( $whole, @{ $chords[1] } );
}
