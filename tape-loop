#!/usr/bin/env perl
use strict;
use warnings;

###
# Attempt at recreating the tape-loop effect of Brain Eno's "Music for Airports" (1978).
# Write-up: https://ology.github.io/2021/03/20/tape-loop-simulation-with-midi-perl/
#
# Examples:
# perl tape-loop
# perl tape-loop 16
# perl tape-loop 32 95 C3 G3 C4 D4 E4 G4 A4
# timidity tape-loop.mid
#
###

use if $ENV{USER} eq 'gene', lib => map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Util);

use MIDI::Util qw(setup_score set_chan_patch);
use List::Util qw(max);

my $max = shift || 8; # How many phrase loops to render

my $patch = shift // 73; # 49=Strings, 73=Flute, 95=Synth, etc.

my @notes = @ARGV ? @ARGV : qw/F3 Gs3 C4 Cs4 Ds4 F4 Gs4/; # s=sharp. Key of Ab
#                              vi  I iii  IV  V  vi' I'
#                              G3 Bf3 D4 Ds4 F4  G4 Bf4

die "Not enough MIDI channels for the notes!\n" if @notes > 15;

# NOTE Changing bpm or ticks will make the minute calculation meaningless
my $factor  = 4;  # Number of whole note durations in a loop
my $bpm     = 60;
my $ticks   = 96; # Magical number for a quarter-note in MIDI-Perl
my $whole   = $ticks * 4; # A whole note
my $channel = 0;  # This should start at 0
my $drums   = 9;  # channel to avoid
my $reverb  = 91; # CC#

my $score = setup_score(lead_in => 0, bpm => $bpm);

my @widths;
my @phrases;

for my $note (@notes) {
    push @phrases, sub {
        $score->control_change($channel, $reverb, 127);
        set_chan_patch($score, $channel++, $patch);
        $channel++ if $channel == $drums; # Skip the drums

        # Compute the intervals
        my $extra = int rand($whole * 2);
        my $width = $whole * $factor + $extra;
        my $head  = int rand($width - $whole);
        my $tail  = $width - ($head + $whole);
        printf "%d. Note: %s, Head=%d, Ticks=%d, Tail=%d, Total=%d\n",
            $channel, $note, $head, $whole, $tail, $width;

        push @widths, $width * $max;

        # Play a loop
        for my $i (1 .. $max) {
            $score->r('d' . $head) if $head;
            $score->n('d' . $whole, $note);
            $score->r('d' . $tail) if $tail;
        }
    };
}

$score->synch(@phrases);

$score->write_score("$0.mid");

printf "Minutes â‰ˆ %.2f\n", max(@widths) / $ticks / $bpm;
