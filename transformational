#!/usr/bin/env perl
use strict;
use warnings;


use Data::Dumper::Compact qw(ddc);
use Data::Dataset::ChordProgressions qw(as_hash transpose);
use MIDI::Drummer::Tiny ();
use MIDI::Util qw(set_chan_patch midi_format);
use Music::Chord::Note ();
use Music::Chord::Progression::Transform ();
use Music::Scales qw(get_scale_notes);

my $bpm   = shift || 100;
my $parts = shift || 'Amv-DMc-Emv-DMc'; # <Note><Major|minor><verse|chorus> phrases
my $reps  = shift || 1;                 # the number of times to repeat an individual phrase
my $multi = shift || 1;                 # the number of times the whole phrase is repeated
my $patch = shift || 4;

my @parts = split /-/, $parts;

my $octave = 4;
my $bars   = 0; # incremented by chords()

my @progressions;

my $d = MIDI::Drummer::Tiny->new(
    file   => "$0.mid",
    bpm    => $bpm,
    reverb => 10,
);

$d->sync(
    \&chords,
    \&drums,
);

$d->write;

sub drums {
    set_chan_patch($d->score, 9, 0);
    $d->metronome44($bars, 1);
}

sub chords {
    set_chan_patch($d->score, 0, $patch);

    my $cn = Music::Chord::Note->new;

    my %data = as_hash();

    my @accum;      # chord accumulator
    my $last_chord; # final chord of the progression

    my $i = 0;

    for my $part (@parts) {
        $i++;

        my ($note, $section, $scale, $pool);
        # set the pool of possible progressions given scale and section
        if ($part =~ /^([A-G][#b]?)(M|m)(v|c)$/) {
            ($note, $scale, $section) = ($1, $2, $3);
            $scale   = $scale   eq 'M' ? 'major' : 'minor';
            $section = $section eq 'v' ? 'verse' : 'chorus';
            $pool    = $data{rock}{$scale}{$section};
        }

        # get a random progression
        my $progression = $pool->[ int rand @$pool ];

        my $named = transpose($note, $scale, $progression->[0]);

        # keep track of the progressions used
        push @progressions, $named;

        print "$note $scale $section: $named, $progression->[1]\n";

        my @chords = split /-/, $named;

        # add the 1st 3 chords to the chord accumulator
        for my $j (1 .. $reps) {
            my $k = 0;
            for my $chord (@chords) {
                $k++;

                $chord =~ s/sus2/add9/;
                $chord =~ s/6sus4/6/;
                $chord =~ s/sus$/sus4/;

                my @notes = $cn->chord_with_octave($chord, $octave);
                @notes = midi_format(@notes);

                $last_chord = \@notes
                    if $k == @chords && $i == @parts && $j == $reps;

                last if $k == @chords;

                push @accum, \@notes;
            }

            last if $i == @parts && $j == $reps;

            # add a transformation of the 3rd chord to all but the final phrase
            my ($pitch, $quality);
            if ($chords[2] =~ /^([A-G][#b]?)(.*)$/) {
                $pitch   = $1;
                $quality = $2 =~ /m/ ? 'm' : '';
            }
            my $prog = Music::Chord::Progression::Transform->new(
                base_note     => $pitch,
                base_octave   => $octave,
                chord_quality => $quality,
                transforms    => 1,#[qw(PRL)],
                verbose       => 1,
            );
            my ($generated) = $prog->generate;
            push @accum, [ midi_format($generated->[0]->@*) ];
        }
    }

    # append the last chord of the progression
    push @accum, $last_chord;

    # add the accumulated notes to the score
    for my $j (1 .. $multi) {
        print ddc(\@accum);
        for my $n (@accum) {
            $d->note($d->whole, @$n);
            # increment the bar count for the drums
            $bars += 1;
        }
    }
}
