#!/usr/bin/env perl
use strict;
use warnings;

use if $ENV{USER} eq "gene", lib => map { "$ENV{HOME}/sandbox/$_/lib" } qw(Graph-Weighted MIDI-Simple-Drummer);
use Graph::Weighted;
use List::Util::WeightedChoice qw( choose_weighted );
use MIDI::Simple::Drummer;
use MIDI::Util qw(setup_score set_chan_patch);

my $phrases = shift || 4;
my $notes   = shift || 4; # Notes per bar
my $initial = shift // 0; # Initial graph node
my $bpm     = shift || 100; # Beats per minute
my $measure = 0;

my $score = setup_score(bpm => $bpm);

$score->synch(
    \&drummer,
    \&bassline,
    \&melody
) for 1 .. $phrases;

$score->write_score("$0.mid");

sub melody {
    my $self = shift;

    set_chan_patch($self, 0, 2);

    my $pitch = Graph::Weighted->new();
    $pitch->populate(
        {
            0 => { label => 'C5',  2 => 0.4, 6 => 0.4, 7 => 0.2 },
            1 => { label => 'D5',  3 => 0.4, 4 => 0.4, 7 => 0.2 },
            2 => { label => 'Ds5', 1 => 0.4, 3 => 0.4, 7 => 0.2 },
            3 => { label => 'F5',  5 => 0.4, 4 => 0.4, 7 => 0.2 },
            4 => { label => 'G5',  2 => 0.4, 3 => 0.4, 7 => 0.2 },
            5 => { label => 'Gs5', 4 => 0.4, 6 => 0.4, 7 => 0.2 },
            6 => { label => 'As5', 0 => 0.4, 3 => 0.4, 7 => 0.2 },
            7 => { label => 'r',   0 => 0.15, 1 => 0.14, 2 => 0.14, 3 => 0.14, 4 => 0.15, 5 => 0.14, 6 => 0.14 },
        }
    );
    my $velocity = Graph::Weighted->new();
    $velocity->populate(
        {
            0 => { label => 'mezzo', 0 => 0.6, 1 => 0.4 },
            1 => { label => 'mf',    0 => 0.6, 1 => 0.4 },
        }
    );
    my $duration = Graph::Weighted->new();
    $duration->populate(
        {
            0 => { label => 'qn', 0 => 0.5, 1 => 0.5 },
            1 => { label => 'en', 0 => 0.6, 1 => 0.4 },
        }
    );

    my @phrase = collect_notes( $notes, $initial, $pitch, $velocity, $duration );

    my $timing = 0;

    for my $event ( @phrase ) {
        my $dura = $event->[0];
        $timing += $MIDI::Simple::Length{$dura};
        last if $timing > $MIDI::Simple::Length{wn};

        if ( $event->[2] eq 'r' ) {
            $self->r($dura);
        }
        else {
            $self->n( @$event );
        }
    }
}

sub bassline {
    my $self = shift;

    set_chan_patch($self, 1, 2);

    my $pitch = Graph::Weighted->new();
    $pitch->populate(
        {
            0 => { label => 'C3',  2 => 0.4, 3 => 0.6 },
            1 => { label => 'Ds3', 2 => 0.4, 3 => 0.6 },
            2 => { label => 'F3',  0 => 0.4, 3 => 0.6 },
            3 => { label => 'G3',  4 => 0.4, 2 => 0.6 },
            4 => { label => 'As3', 0 => 0.4, 1 => 0.6 },
        }
    );
    my $velocity = Graph::Weighted->new();
    $velocity->populate(
        {
            0 => { label => 'mf',    0 => 0.7, 1 => 0.3 },
            1 => { label => 'mezzo', 0 => 0.6, 1 => 0.4 },
        }
    );
    my $duration = Graph::Weighted->new();
    $duration->populate(
        {
            0 => { label => 'qn', 0 => 0.6, 1 => 0.4 },
            1 => { label => 'en', 0 => 0.6, 1 => 0.4 },
        }
    );

    my @phrase = collect_notes( $notes, $initial, $pitch, $velocity, $duration );

    for my $event ( @phrase ) {
        $self->n( @$event );
    }
}

sub drummer {
    my $d = MIDI::Simple::Drummer->new(
        -bpm    => $bpm,
        -score  => $score,
        -volume => 120,
    );
    for my $beat ( 1 .. $d->beats ) {
        $d->note( $d->EIGHTH, $d->backbeat_rhythm( -beat => $beat ) );
        if ( $beat == 3 ) {
            $d->note( $d->EIGHTH, $d->kick );
        }
        else {
            $d->rest( $d->EIGHTH );
        }
    }
}

sub collect_notes {
    my ( $n, $initial, $pitch, $velocity, $duration ) = @_;

    my $p_vertex = $initial;
    my $v_vertex = 0;
    my $d_vertex = 0;

    my $notes = [];

    for my $i ( 1 .. $n ) {
        my $p = $pitch->get_vertex_attribute( $p_vertex, 'label' );
        my $v = $velocity->get_vertex_attribute( $v_vertex, 'label' );
        my $d = $duration->get_vertex_attribute( $d_vertex, 'label' );

        push @$notes, [ $d, $v, $p ];

        if ( $i < $n ) {
            $p_vertex = next_vertex( $pitch, $p_vertex );
            $v_vertex = next_vertex( $velocity, $v_vertex );
            $d_vertex = next_vertex( $duration, $d_vertex );
        }
    }

    return @$notes;
}

sub next_vertex {
    my ( $graph, $vertex ) = @_;

    my $successors = [];

    for my $successor ( $graph->successors($vertex) ) {
        push @$successors, {
            vertex => $successor,
            weight => $graph->get_cost( [ $vertex, $successor ] ),
        };
    }

    my $choice = choose_weighted( $successors, sub { $_[0]->{weight} } );

    return $choice->{vertex};
}
