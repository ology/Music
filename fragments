#!/usr/bin/env perl
use strict;
use warnings;


use List::Util qw/ shuffle /;
use MIDI::Drummer::Tiny;
use MIDI::Util qw(setup_score set_chan_patch);
use Music::Duration::Partition;
use Music::Scales;
use Music::VoiceGen;

my $max   = shift || 4;
my $bpm   = shift || 90;
my $size  = shift || 4;
my $note  = shift || 'A';
my $scale = shift || 'major';

my $top1_patch   = 0;
my $top2_patch   = 40;
my $bottom_patch = 42;

my $wn  = 'wn';
my $en  = 'en';

my $intervals = [qw/ -4 -3 -2 -1 1 2 3 4 /];

my $score = setup_score( bpm => $bpm );

$score->synch(
    \&top1,
    \&top2,
    \&bottom,
    \&beat,
);

$score->write_score("$0.mid");

sub top1 {
    set_chan_patch( $score, 0, $top1_patch );

    my $mdp = Music::Duration::Partition->new(
        size => $size,
        pool => [qw/ en sn /],
    );

    my $motif = $mdp->motif;

    my @pitches = get_scale_MIDI( $note, 3, $scale );

    my $voice = Music::VoiceGen->new(
        pitches   => \@pitches,
        intervals => $intervals,
    );

    my @notes1 = map { $voice->rand } 0 .. @$motif - 1;

    for my $x ( 1 .. $max ) {
        my @notes2 = map { $voice->rand } 0 .. @$motif - 1;

        for my $n ( 0 .. @$motif - 1 ) {
            if ( int( rand 10 ) == 0 ) {
                $score->r( $motif->[$n] );
            }
            else {
                $score->n( $motif->[$n], $notes1[$n] );
            }
        }

        $score->r($wn);

        my @phrase = shuffle @$motif;

        for my $n ( 0 .. @$motif - 1 ) {
            if ( int( rand 10 ) == 0 ) {
                $score->r( $phrase[$n] );
            }
            else {
                $score->n( $phrase[$n], $notes2[$n] );
            }
        }

        $score->r($wn);
    }
}

sub top2 {
    set_chan_patch( $score, 1, $top2_patch );

    my $mdp = Music::Duration::Partition->new(
        size => $size,
        pool => [qw/ qn en /],
    );

    my $motif = $mdp->motif;

    my @pitches = get_scale_MIDI( $note, 3, $scale );

    my $voice = Music::VoiceGen->new(
        pitches   => \@pitches,
        intervals => $intervals,
    );

    my @notes1 = map { $voice->rand } 0 .. @$motif - 1;

    for my $x ( 1 .. $max ) {
        $score->r($wn);

        my @notes2 = map { $voice->rand } 0 .. @$motif - 1;

        for my $n ( 0 .. @$motif - 1 ) {
            if ( int( rand 10 ) == 0 ) {
                $score->r( $motif->[$n] );
            }
            else {
                $score->n( $motif->[$n], $notes1[$n] );
            }
        }

        $score->r($wn);

        my @phrase = shuffle @$motif;

        for my $n ( 0 .. @$motif - 1 ) {
            if ( int( rand 10 ) == 0 ) {
                $score->r( $phrase[$n] );
            }
            else {
                $score->n( $phrase[$n], $notes2[$n] );
            }
        }
    }
}

sub bottom {
    set_chan_patch( $score, 2, $bottom_patch );
#    $score->Volume(30);

    my $mdp = Music::Duration::Partition->new(
        size => $size * 2,
        pool => [qw/ wn hn /],
    );

    my $motif = $mdp->motif;

    my @pitches = get_scale_MIDI( $note, 1, $scale );

    my $voice = Music::VoiceGen->new(
        pitches   => \@pitches,
        intervals => [qw/ -4 -3 -2 2 3 4 /],
    );

    my @notes1 = map { $voice->rand } 0 .. @$motif - 1;

    for my $x ( 1 .. $max ) {
        my @notes2 = map { $voice->rand } 0 .. @$motif - 1;

        for my $n ( 0 .. @$motif - 1 ) {
            $score->n( $motif->[$n], $notes1[$n] );
        }

        for my $n ( 0 .. @$motif - 1 ) {
            $score->n( $motif->[$n], $notes2[$n] );
        }
    }

    $score->n( $wn, $pitches[0] );
}

sub beat {
    my $d = MIDI::Drummer::Tiny->new( bpm => $bpm, score => $score );

    for my $n ( 1 .. $max ) {
        $d->note( $d->quarter, $d->closed_hh ) for 1 .. $size * $size;
    }
}
