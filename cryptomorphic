#!/usr/bin/env perl
use strict;
use warnings;

# Prefer my local libraries
use if $ENV{USER} eq "gene", lib => map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Drummer-Tiny MIDI-Util Music-Duration-Partition);

use List::Util qw/ shuffle /;
use MIDI::Drummer::Tiny; # https://metacpan.org/pod/MIDI::Drummer::Tiny
use MIDI::Util qw(setup_score set_chan_patch); # https://metacpan.org/pod/MIDI::Util
use Music::Duration::Partition; # https://metacpan.org/pod/Music::Duration::Partition
use Music::Scales;
use Music::VoiceGen;
use Music::Voss qw/ powers /;

my $size = shift || 8;
my $max  = shift || 8;
my $bpm  = shift || 90;
my $mod  = shift || 2; # Default: alternate

my $top_patch    = 0;
my $bottom_patch = 42;

my $score = setup_score( bpm => $bpm );

$score->synch(
    \&melody,
    \&bass,
    \&beat,
);

$score->write_score("$0.mid");

sub beat {
    my $d = MIDI::Drummer::Tiny->new( bpm => $bpm, score => $score );

    for my $i ( 1 .. $max * $size + ( $mod * $max ) ) {
        $d->note( $d->quarter, $d->closed_hh );
    }
}

sub melody {
    set_chan_patch( $score, 0, $top_patch );

    my $mdp = Music::Duration::Partition->new(
        size => $size,
#        pool => [qw/ twn thn tqn ten tsn /],
        pool => [qw/ qn en sn /],
    );

    my $motif = $mdp->motif;

    my ( $scale, $genf ) = get_genf( 'A', 5, 'minor' );

    for my $i ( 1 .. $max ) {
        my @notes = map { $scale->[ $genf->($_) % @$scale ] } 0 .. @$motif - 1;

        my @phrase = $i % $mod ? @$motif : shuffle @$motif;

        $mdp->add_to_score($score, \@phrase, \@notes);

#        $score->r('wn');
    }
}

sub bass {
    set_chan_patch( $score, 1, $bottom_patch );

    my $mdp = Music::Duration::Partition->new(
        size => $size,
        pool => [qw/ wn hn /],
    );

    my $motif = $mdp->motif;

    my @intervals = qw/ -4 -3 -2 2 3 4 /;
    my @pitches   = get_scale_MIDI( 'A', 1, 'pminor' );

    my $voice = Music::VoiceGen->new(
        pitches   => \@pitches,
        intervals => \@intervals,
    );

    for my $i ( 1 .. $max ) {
        my @notes = map { $voice->rand } 0 .. @$motif - 1;

        my @phrase = $i % 2 ? @$motif : shuffle @$motif;

        $mdp->add_to_score($score, \@phrase, \@notes);

        $score->n( 'wn', $voice->rand );
    }

    $score->n( 'wn', $pitches[0] );
}

sub get_genf {
    my ( $note, $octave, $type ) = @_;

    my @scale = map { $_ . $octave } get_scale_notes( $note, $type );
    # Transform to MIDI accidentals
    for ( @scale ) {
        s/#/s/;
        s/b/f/;
    }

    my $seed = [ map { sub { int rand 2 } } @scale ];
    my $genf = powers( calls => $seed );

    return \@scale, $genf;
}
