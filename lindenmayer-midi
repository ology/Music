#!/usr/bin/env perl

# Create a MIDI file of various L-systems
# Example:
# perl lindenmayer-midi --rule=6 --bpm=100 # a Sierpiński triangle 

use strict;
use warnings;


use Getopt::Long qw(GetOptions);
use MIDI::Util qw(setup_score set_chan_patch);
use Music::ScaleNote ();
use Music::Note ();
use Pod::Usage;

pod2usage(1) unless @ARGV;

my %opts = (
    rule       => 2,         # Rule number in the list of rules below
    iterations => 4,         # Number of iterations of the fractal curve
    n_duration => 'qn',      # Space separated list of note durations from which to choose *
    r_duration => 'qn',      # Space separated list of rest durations from which to choose *
    midi_note  => 60,        # Initial midinum format note. 60 = Middle C
    offset     => 1,         # +/- Distance to move in the scale for a new note value
    scale      => 'major',   # Name of the scale to traverse
    bpm        => 300,       # Beats per minute of the rendered MIDI
    format     => 'midinum', # see Music::Note
    fpatch     => 0,         # midi patch number
    gpatch     => 13,        # midi patch number
);
GetOptions( \%opts,
    'rule=i',
    'iterations=i',
    'n_duration=s',
    'r_duration=s',
    'midi_note=i',
    'offset=i',
    'scale=i',
    'bpm=i',
    'format=s',
    'fpatch=i',
    'gpatch=i',
    'help|?',
    'man',
) or pod2usage(2);

pod2usage(1) if $opts{help};
pod2usage( -exitval => 0, -verbose => 2 ) if $opts{man};

# Split the durations into a list so that they can be randomly selected
my $n_duration = [ split /\s+/, $opts{n_duration} ];
my $r_duration = [ split /\s+/, $opts{r_duration} ];

# The master list of fractals by rule number, their axioms and production rules
my %rules = (
    1 => { # Branches
        axiom => 'X',
        X => 'YF-X+X',
        Y => 'F',
    },
    2 => { # Koch curve
        axiom => 'F',
        F => 'F+F-F-F+F',
    },
    3 => { # Fractal plant
        axiom => 'X',
        X => 'F-XXF-X+FX',
        F => 'FF',
    },
    4 => { # Dragon curve
        axiom => 'FX',
        X => 'X+YF+',
        Y => '-FX-Y',
    },
    5 => { # Sierpiński arrowhead curve
        axiom => 'F',
        F => 'G-F-G',
        G => 'F+G+F',
    },
    6 => { # Sierpiński triangle
        axiom => 'F-G-G',
        F => 'F-G+F+G-F',
        G => 'GG',
    },
    7 => { # Koch snowflake
        axiom => 'F++F++F',
        F => 'F-F++F-F',
        X => 'FF',
    },
    8 => { # Sierpiński carpet
        axiom => 'F',
        F => 'F+F-F-F-G+F+F+F-F',
        G => 'GGG',
    },
    9 => { # Koch island
        axiom => 'F-F-F-F',
        F => 'F-F+F+FF-F-F+F',
    },
    10 => { # Koch islands and lakes
        axiom => 'F+F+F+F',
        F => 'F+f-FF+F+FF+Ff+FF-f+FF-F-FF-Ff-FFF',
        f => 'ffffff',
    },
    11 => { # Grid
        axiom => 'F-F-F-F',
        F => 'FF-F-F-F-FF',
    },
    12 => { # Terndrils
        axiom => 'F-F-F-F',
        F => 'FF-F--F-F',
    },
    13 => { # Custom
        axiom => 'F+G-F+G',
        F => 'FG+F--F+F',
    },
    14 => { # Branches with space
        axiom => 'X',
        X => 'YF-X+X',
        Y => 'f',
    },
    15 => { # Leaf
        axiom => 'X',
        X => 'F[+X][-X]FX',
        F => 'FF',
    },
);

my $midi_note = $opts{midi_note};

# Get the axiom to use based on the given rule
my $string = $rules{ $opts{rule} }{axiom};

# Prepare to create MIDI
my $score = setup_score( bpm => $opts{bpm} );

# Create a note object for the given start note value
my $note = Music::Note->new( $midi_note, $opts{format} );

# Create a scale-note object to use to traverse the given scale
my $msn = Music::ScaleNote->new(
    scale_note => $note->format('isobase'),
    scale_name => $opts{scale},
#    verbose    => 1,
);

# The dispatch table of MIDI routines based on "turtle graphic" moves
my %translate = (
    # Add a rest to the score
    'f' => sub { $score->r( random_duration( @$r_duration ) ) },
    # Add a note to the score
    'F' => sub {
        set_chan_patch( $score, 0, $opts{fpatch} );
        $score->n( random_duration( @$n_duration ), $midi_note );
    },
    # Add a note to the score
    'G' => sub {
        set_chan_patch( $score, 1, $opts{gpatch} );
        $score->n( random_duration( @$n_duration ), $midi_note );
    },
    # Decrement the scale-note
    '-' => sub {
        $midi_note = $msn->get_offset(
            note_name   => $midi_note,
            note_format => $opts{format},
            offset      => -$opts{offset},
        )->format($opts{format});
    },
    # Increment the scale-note
    '+' => sub {
        $midi_note = $msn->get_offset(
            note_name   => $midi_note,
            note_format => $opts{format},
            offset      => $opts{offset},
        )->format($opts{format});
    },
);

# Apply the string re-writing production rules
for ( 1 .. $opts{iterations} ) {
    $string =~ s/(.)/defined($rules{ $opts{rule} }{$1}) ? $rules{ $opts{rule} }{$1} : $1/eg;
}
warn "$string\n";

# Execute the dispatch routines defined by the string elements
for my $command ( split //, $string ) {
    last if $midi_note < 0 || $midi_note > 127;
    $translate{$command}->() if exists $translate{$command};
}

# Write the MIDI file
$score->write_score( $0 . '.mid' );

# Return a random duration.  * A set of durations makes things disjointed and strange. YMMV
sub random_duration {
    my ( @duration ) = @_;
    return $duration[ int rand @duration ];
}

__END__

=head1 NAME

lindenmayer-midi - Create a MIDI file of L-system transformations

=head1 SYNOPSIS

  lindenmayer-midi [--options|-o]

  TODO!

=head1 OPTIONS

=over 4

=item B<help>

Print a brief help message.

=item B<man>

Print the full help (the "manpage).

=back

=head1 DESCRIPTION

B<lindenmayer-midi> transforms the input into a MIDI file of L-systems!

=cut
