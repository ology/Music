#!/usr/bin/env perl

# Real Book #421
# Duke Ellington, Take the "A" Train (in C)

use strict;
use warnings;

use MIDI::Drummer::Tiny;
use MIDI::Chord::Guitar;
use MIDI::Praxis::Variation qw(tie_durations);
use MIDI::Util qw(set_chan_patch);

my $bpm = shift || 154;

my $chord_patch = 4;
my $melody_patch = 66;

my $d = MIDI::Drummer::Tiny->new(
    file => $0 . '.mid',
    bpm  => $bpm,
    bars => 48,
);

my $channel = 0; # Internal increment

$d->sync(
    \&drums,
    \&chords,
    \&melody,
);

$d->write;

sub drums {
    $d->count_in(1);
    for my $n (1 .. $d->bars) {
        $d->note($d->quarter,        $d->ride1, $d->kick);
        $d->note($d->triplet_eighth, $d->ride1);
        $d->rest($d->triplet_eighth);
        $d->note($d->triplet_eighth, $d->ride1);
        $d->note($d->quarter,        $d->ride1, $d->snare);
        $d->note($d->triplet_eighth, $d->ride1);
        $d->rest($d->triplet_eighth);
        $d->note($d->triplet_eighth, $d->ride1);
    }
}

sub chords {
    set_chan_patch($d->score, $channel++, $chord_patch);

    # (Local voicing file used on the author's machine.)
    my $mcg = MIDI::Chord::Guitar->new(voicing_file => "$ENV{HOME}/sandbox/MIDI-Chord-Guitar/share/midi-guitar-chord-voicings.csv");

    my $C    = $mcg->transform('C3', '',    1);
    my $D7f5 = $mcg->transform('D3', '7b5', 0);
    my $Dm7  = $mcg->transform('D3', 'm7',  1);
    my $G7   = $mcg->transform('G2', '7',   3);
    my $C7   = $mcg->transform('C3', '7',   1);
    my $F    = $mcg->transform('F2', '',    3);
    my $D7   = $mcg->transform('D3', '7',   1);
    my $G7f9 = $mcg->transform('G2', '7b9', 1);

    $d->rest($d->whole); # while counting-in

    for my $n (1 .. 2) {
        $d->note($d->whole, @$C) for 1 .. 2;
        $d->note($d->whole, @$D7f5) for 1 .. 2;
        $d->note($d->whole, @$Dm7);
        $d->note($d->whole, @$G7);
        $d->note($d->whole, @$C);
        if ($n % 2) { # odd
            $d->note($d->whole, @$C);
        }
        else { # even
            $d->note($d->whole, @$C7);
        }
    }
    for my $n (1 .. 2) {
        $d->note($d->whole, @$F) for 1 .. 4;
        $d->note($d->whole, @$D7) for 1 .. 2;
        $d->note($d->whole, @$Dm7);
        $d->note($d->half, @$G7);
        $d->note($d->half, @$G7f9);
        $d->note($d->whole, @$C) for 1 .. 2;
        $d->note($d->whole, @$D7f5) for 1 .. 2;
        $d->note($d->whole, @$Dm7);
        $d->note($d->whole, @$G7);
        $d->note($d->whole, @$C) for 1 .. 2;
    }
}

sub melody {
    set_chan_patch($d->score, $channel++, $melody_patch);

    my @tie = (
        'd' . tie_durations('wn', 'en'),
        'd' . tie_durations('wn', 'hn', 'qn', 'en'),
        'd' . tie_durations('hn', 'qn', 'en'),
        'd' . tie_durations('hn', 'hn', 'qn', 'en'),
    );

    $d->rest($d->whole); # while counting-in

    for my $n (1 .. 2) {
        $d->note($tie[0], 'G4');
        $d->note($d->dotted_quarter, 'E5');
        $d->note($d->quarter, 'G4');
        $d->note($d->quarter, 'C5');
        $d->note($d->eighth, 'E5');
        $d->note($tie[1], 'Gs4');
        $d->note($d->whole, 'A4');
        $d->note($d->triplet_eighth, 'A4');
        $d->rest($d->triplet_eighth);
        $d->note($d->triplet_eighth, 'As4');
        $d->note($d->triplet_eighth, 'B4');
        $d->rest($d->triplet_eighth);
        $d->note($d->triplet_eighth, 'E5');
        $d->note($d->triplet_eighth, 'G4');
        $d->rest($d->triplet_eighth);
        $d->note($d->triplet_eighth, 'Gf4');
        $d->note($d->triplet_eighth, 'F4');
        $d->rest($d->triplet_eighth);
        $d->note($d->triplet_eighth, 'Df5');
        $d->note($d->eighth, 'C5');
        $d->note($tie[1], 'E4');
    }
    for my $n (1 .. 2) {
        $d->note($d->eighth, 'A4');
        $d->note($tie[2], 'C5');
        $d->note($d->eighth, 'E5');
        $d->note($d->dotted_quarter, 'F4');
        $d->note($d->quarter, 'A4');
        $d->note($d->quarter, 'C5');
        $d->note($d->eighth, 'E5');
        $d->note($tie[1], 'A4');
        $d->note($d->eighth, 'A4');
        $d->note($tie[2], 'C5');
        $d->note($d->eighth, 'E5');
        $d->note($d->dotted_quarter, 'Fs4');
        $d->note($d->quarter, 'A4');
        $d->note($d->quarter, 'C5');
        $d->note($d->eighth, 'E5');
        $d->note($tie[3], 'A4');
        $d->note($d->half, 'G4');
        $d->note($tie[0], 'G4');
        $d->note($d->dotted_quarter, 'E5');
        $d->note($d->quarter, 'G4');
        $d->note($d->quarter, 'C5');
        $d->note($d->eighth, 'E5');
        $d->note($tie[1], 'Gs4');
        $d->note($d->whole, 'A4');
        $d->note($d->triplet_eighth, 'A4');
        $d->rest($d->triplet_eighth);
        $d->note($d->triplet_eighth, 'As4');
        $d->note($d->triplet_eighth, 'B4');
        $d->rest($d->triplet_eighth);
        $d->note($d->triplet_eighth, 'E5');
        $d->note($d->triplet_eighth, 'G4');
        $d->rest($d->triplet_eighth);
        $d->note($d->triplet_eighth, 'Gf4');
        $d->note($d->triplet_eighth, 'F4');
        $d->rest($d->triplet_eighth);
        $d->note($d->triplet_eighth, 'Df5');
        # Coda
        if ($n % 2) { # odd
            $d->note($d->eighth, 'C5');
            $d->note($tie[1], 'E4');
        }
        else { # even
            $d->note($d->eighth, 'C5');
            $d->note($d->dotted_quarter, 'E4');
            $d->note($d->quarter, 'F4');
            $d->note($d->quarter, 'Fs4');
            $d->note($d->triplet_eighth, 'G4');
            $d->rest($d->triplet_eighth);
            $d->note($d->triplet_eighth, 'A4');
            $d->note($d->triplet_eighth, 'B4');
            $d->rest($d->triplet_eighth);
            $d->note($d->triplet_eighth, 'C5');
            $d->rest($d->quarter);
            $d->note($d->eighth, 'C4');
        }
    }
}
