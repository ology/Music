#!/usr/bin/env perl

# Generate or specify a series of chord transformations to render.
# Examples:
# perl transform-chords --bpm=120 --note=Bb --octave_low=1 --quality=m --transforms=I,P,L,R,PLR --motifs=3
# perl transform-chords --b=120 --n=Bb --octave_l=1 --q=m --t=I,P,L,R,PLR --m=3  # same with abbreviations
# perl transform-chords --octave_hi=4 --patch_hi=69 --octave_med=4 --patch_med=4 --patch_low=35 # set patches
# perl transform-chords --quality=7 --transforms=12 --verbose
# perl transform-chords --quality=7b5 --allowed=T
# perl transform-chords  # or just go with the defaults!

use strict;
use warnings;

use if $ENV{USER} eq "gene", lib => map { "$ENV{HOME}/sandbox/$_/lib" } qw(Music-Bassline-Generator MIDI-Util Music-Chord-Progression-Transform Music-Duration-Partition); # local author libs
use lib "$ENV{HOME}/repos/Music-Chord-Note/lib"; # my fork

use Data::Dumper::Compact qw(ddc);
use Getopt::Long qw(GetOptions);
use Music::Bassline::Generator ();
use MIDI::Util qw(setup_score set_chan_patch midi_format);
use Music::Chord::Progression::Transform ();
use Music::Duration::Partition ();

my %opt = ( # defaults:
    bpm        => 100,
    note       => 'C',
    octave_hi  => 6,  # melody
    octave_med => 5,  # chords
    octave_low => 2,  # bass
    quality    => '', # '' = major, 'm' = minor
    transforms => 16,
    motifs     => 2,
    patch_hi   => 0,
    patch_med  => 0,
    patch_low  => 0,
    pool_hi    => 'qn,en,sn',  # melody
    pool_low   => 'hn,dhn,qn', # bass
    allowed    => 'N,T',
    verbose    => 0,
);
GetOptions(\%opt,
    'bpm=i',
    'note=s',
    'octave_hi=i',
    'octave_med=i',
    'octave_low=i',
    'quality=s',
    'transforms=i',
    'motifs=i',
    'patch_hi=i',
    'patch_med=i',
    'patch_low=i',
    'pool_hi=s',
    'pool_low=s',
    'allowed=s',
    'verbose',
);

# convert a comma-separated string of transformations, if not given a number
if ($opt{transforms} !~ /^\d+$/) {
    $opt{transforms} = [ split /,/, $opt{transforms} ];
}
# convert the pools
$opt{pool_hi}  = [ split /,/, $opt{pool_hi} ];
$opt{pool_low} = [ split /,/, $opt{pool_low} ];
$opt{allowed}  = [ split /,/, $opt{allowed} ];

my $channel = 0;
my $size    = 4; # number of beats per phrase
my @chords;      # populated by chords() and used by bass() and melody()

my $score = setup_score(bpm => $opt{bpm});

# play the parts simultaneously
$score->synch(
    \&chords,
    \&melody,
    \&bass,
);

# write the score to a midi file
$score->write_score("$0.mid");

sub chords {
    set_chan_patch($score, $channel++, $opt{patch_med});

    my $prog = Music::Chord::Progression::Transform->new(
        base_note     => $opt{note},
        base_octave   => $opt{octave_med},
        chord_quality => $opt{quality},
        transforms    => $opt{transforms},
        format        => 'midinum',
        allowed       => $opt{allowed},
        verbose       => $opt{verbose},
    );
    my ($generated, $transforms, $chords) = $prog->generate;
    print ddc($transforms, {max_width=>512});
    print ddc($chords, {max_width=>512});

    @chords = @$chords;

    $score->n('wn', @$_) for @$generated;
}

sub melody {
    set_chan_patch($score, $channel++, $opt{patch_hi});

    my $melody = Music::Bassline::Generator->new(
        octave  => $opt{octave_hi},
        verbose => $opt{verbose},
    );

    my $phrase = Music::Duration::Partition->new(
        size => $size,
        pool => $opt{pool_hi},
    );

    _to_score($score, $melody, $phrase, \@chords);
}

sub bass {
    set_chan_patch($score, $channel++, $opt{patch_low});

    my $bass = Music::Bassline::Generator->new(
        octave  => $opt{octave_low},
        tonic   => 1,
        verbose => $opt{verbose},
    );

    my $phrase = Music::Duration::Partition->new(
        size => $size,
        pool => $opt{pool_low},
    );

    _to_score($score, $bass, $phrase, \@chords);
}

sub _to_score {
    my ($score, $part, $mdp, $chords) = @_;
    my @motifs = $mdp->motifs($opt{motifs});
    for my $n (0 .. $#chords) {
        my $motif = $motifs[ $n % @motifs ];
        # generate notes for the number of motif durations, given the nth chord
        my $notes = eval { $part->generate($chords->[$n], scalar @$motif) };
        if ($notes) {
            $mdp->add_to_score($score, $motif, $notes);
        }
        else {
            (my $note = $chords->[$n]) =~ s/^([A-G][#b]?).*$/$1/;
            my @note = midi_format($note . $part->octave);
            $score->n('wn', $note[0]);
        }
    }
}
